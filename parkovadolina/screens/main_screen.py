from core.constants import EXIT
from telebot import types


class MainScreen:

    WELCOME_TEXT = "–í—ñ—Ç–∞–Ω–Ω—è! –Ø –±—É–¥—É —Ç–æ–±—ñ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º —É—Å—å–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ —ñ–Ω–≤–µ—Å—Ç–æ—Ä—ñ–≤ –ñ–ö –ü–∞—Ä–∫–æ–≤–∞ –î–æ–ª–∏–Ω–∞"
    RULES_NOTICE = "–ü—Ä–æ—à—É –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∑–Ω–∏–∑—É –∫–Ω–æ–ø–∫—É üìã–ü—Ä–∞–≤—ñ–ª–∞ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è"
    SECTIONS = ["üóû–í–∞–∂–ª–∏–≤—ñ –Ω–æ–≤–∏–Ω–∏", "üéñI–Ω—ñ—Ü—ñ–∞—Ç–∏–≤–Ω–∞ –≥—Ä—É–ø–∞", "üèó–ë—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ",
                "üß©–ü–µ—Ä—Å–æ–Ω–∏", "üëÇ–ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è", "üóì–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
                "üîç–í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è", "ü§ù–ì—Ä—É–ø–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö —ñ–Ω–≤–µ—Å—Ç–æ—Ä—ñ–≤"]

    def __init__(self, bot, dao):
        self.bot = bot
        self.dao = dao
        self.sections = self._build_sections()

    def _build_sections(self):
        return [types.KeyboardButton(i) for i in self.SECTIONS]

    def screen(self, message):
        user = self.dao.users.get_by_user_id(message.from_user.id)
        if user:
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=1)
            keyboard.add(*self.sections)
            if message.text == "/start":
                self.bot.send_message(message.chat.id, self.WELCOME_TEXT, reply_markup=keyboard)
            else:
                self.bot.send_message(message.chat.id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=keyboard)
        else:
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=1)
            keyboard.add(types.KeyboardButton(text="üìã–ü—Ä–∞–≤–∏–ª–∞"))
            self.bot.send_message(message.chat.id, f"{self.WELCOME_TEXT}\n\n{self.RULES_NOTICE}", reply_markup=keyboard)

    @staticmethod
    def match(message):
        if message.text.startswith(EXIT) or message.text.startswith("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é") or message.text.startswith("/start"):
            return True
        return False

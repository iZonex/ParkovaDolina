from parkovadolina.core.screen import Screen
from aiogram import types
from aiogram.types.message import ParseMode
from parkovadolina.core.constants import EXIT
# get_actual_state_of_month == choiced_state. if less then actual state. Issues with building, If equail Normal, If more great

class BuildingProgressScreen(Screen):

    SECTIONS = ["‚Ü©Ô∏è–ù–∞–∑–∞–¥"]

    BUILDING_STATUS_MAP = {
        "1": "–ö–æ—Ç–ª–æ–≤–∞–Ω",
        "2": "–ü–∞–ª—ñ",
        "3": "–§—É–Ω–¥–∞–º–µ–Ω—Ç",
        "4": "–ú–æ–Ω–æ–ª—ñ—Ç–Ω–∏–π –∑–∞–ª—ñ–∑–æ–±–µ—Ç–Ω–Ω–∏–π –∫–∞—Ä–∫–∞—Å",
        "5": "–°—Ç—ñ–Ω–∏, –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏, –ø–æ–∫—Ä—ñ–≤–ª—è",
        "6": "–í–Ω—É—Ç—Ä—ñ—à–Ω—î –æ–∑–¥–æ–±–ª–µ–Ω–Ω—è",
        "7": "–í—ñ–∫–Ω–∞, –¥–≤–µ—Ä—ñ, –ª—ñ—Ñ—Ç–∏",
        "8": "–§–∞—Å–∞–¥",
        "9": "–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ —ñ–Ω–∂–µ–Ω–µ—Ä—ñ –º–µ—Ä–µ–∂—ñ",
        "10": "–ë–ª–∞–≥–æ—É—Å—Ç—Ä—ñ–π",
        "11": "–ó–æ–≤–Ω—ñ—à–Ω—ñ —ñ–Ω–∂–µ–Ω–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ",
        "12": "–ë—É–¥–∏–≤–Ω–∏—Ü—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ"
    }

    PREFIX = "–ô–¥–µ –µ—Ç–∞–ø –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞: "

    STATUS_MAP = {
        "1": "‚úÖ–í—Å–µ –¥–æ–±—Ä–µ",
        "2": "‚ùå–ó—É–ø–∏–Ω–µ–Ω–æ",
        "3": "‚ùóÔ∏è–ü–æ–º—ñ—á–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏"
    }

    STATUS_MAP_SMALL = {
        "done": "‚úÖ",
        "waiting": "‚ùå",
        "3": "‚ùóÔ∏è",
        "inprogress": "‚ñ∂Ô∏è",
    }

    def __init__(self, bot, dao):
        self.bot = bot
        self.dao = dao
        self.sections = self._build_sections()

    def _build_sections(self):
        return [types.KeyboardButton(i) for i in self.SECTIONS]

    def generate_states(self, done_states, inprogress_states):
        states = ["waiting" for i in range(len(self.BUILDING_STATUS_MAP))]
        for i in done_states:
            states[i] = "done"
        for i in inprogress_states:
            states[i-1] = "inprogress"
        return "\n".join([f'- {self.STATUS_MAP_SMALL.get(e)} {self.BUILDING_STATUS_MAP.get(str(i))}' for i,e in enumerate(states, start=1)])

    def progress_bar(self, progress=4, max_progress=12):
        estimated_line = ["‚ñ°" for _ in range(max_progress)]
        for i in range(progress):
            estimated_line[i] = "‚ñ†"
        return "".join(estimated_line)

    async def details(self, message, i):
        progress = [int(i) for i in i.get_expected_state()]
        done_progress = [int(i) for i in range(0, min(progress)-1)]
        progress_percent = round(min(progress) / 12 * 100, 2)
        text_states = self.generate_states(done_progress, progress)
        text_body = (
            f'<strong>üèó{i.title.upper()}</strong>\n\n'
            f'<strong>–ü–ª–∞–Ω –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞ –Ω–∞ {i.get_date()}:</strong>\n'
            f"{text_states}\n\n"
            f'<strong>|{self.progress_bar(min(progress), 12)}| {progress_percent}% [{min(progress)} –∑ 12]</strong>'
        )
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        keyboard.row(*[types.KeyboardButton(i) for i in self.STATUS_MAP.values()])
        keyboard.add(*self.sections)
        await self.bot.send_message(message.chat.id, text_body, reply_markup=keyboard, parse_mode=ParseMode.HTML)

    async def screen(self, message):
        ctx = self.dao.session.get(message.from_user.id).get_context()
        try:
            i = self.dao.building_plan.get_by_building_title(message.text)
            await self.details(message, i)
        except KeyError:
            keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
            keyboard.add(types.KeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥"))
            await self.bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±—ñ –∑–∞ –≤–∞—à –≤–Ω–µ—Å–æ–∫", reply_markup=keyboard, parse_mode=ParseMode.HTML)

    def match_context(self, message):
        return message.text in [i for i in self.STATUS_MAP.values()]

    @staticmethod
    def match(message):
        return message.text.lower().startswith("–ë—É–¥–∏–Ω–æ–∫".lower()) or False
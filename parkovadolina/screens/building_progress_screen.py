from telebot import types

# get_actual_state_of_month == choiced_state. if less then actual state. Issues with building, If equail Normal, If more great

class BuildingScreen:

    SECTIONS = ["üö™–í–∏—Ö—ñ–¥"]

    BUILDING_STATUS_MAP = {
        "1": "–ö–æ—Ç–ª–æ–≤–∞–Ω",
        "2": "–ü–∞–ª—ñ",
        "3": "–§—É–Ω–¥–∞–º–µ–Ω—Ç",
        "4": "–ú–æ–Ω–æ–ª—ñ—Ç–Ω–∏–π –∑–∞–ª—ñ–∑–æ–±–µ—Ç–Ω–Ω–∏–π –∫–∞—Ä–∫–∞—Å",
        "5": "–°—Ç—ñ–Ω–∏, –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏, –ø–æ–∫—Ä—ñ–≤–ª—è",
        "6": "–í–Ω—É—Ç—Ä—ñ—à–Ω—î –æ–∑–¥–æ–±–ª–µ–Ω–Ω—è",
        "7": "–í—ñ–∫–Ω–∞, –¥–≤–µ—Ä—ñ, –ª—ñ—Ñ—Ç–∏",
        "8": "–§–∞—Å–∞–¥",
        "9": "–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ —ñ–Ω–∂–µ–Ω–µ—Ä—ñ –º–µ—Ä–µ–∂—ñ",
        "10": "–ë–ª–∞–≥–æ—É—Å—Ç—Ä—ñ–π",
        "11": "–ó–æ–≤–Ω—ñ—à–Ω—ñ —ñ–Ω–∂–µ–Ω–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ",
        "12": "–ë—É–¥–∏–≤–Ω–∏—Ü—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ"
    }
    
    BUILDING_NUMBERS = {
        "1": "–ë—É–¥–∏–Ω–æ–∫ ‚Ññ1 –°–µ–∫—Ü—ñ—è ‚Ññ1-3",
        "2": "–ë—É–¥–∏–Ω–æ–∫ ‚Ññ1 –°–µ–∫—Ü—ñ—è ‚Ññ4-6",
        "3": "–ë—É–¥–∏–Ω–æ–∫ ‚Ññ1 –°–µ–∫—Ü—ñ—è ‚Ññ7-9",
        "4": "–ë—É–¥–∏–Ω–æ–∫ ‚Ññ2 –°–µ–∫—Ü—ñ—è ‚Ññ1",
        "5": "–ë—É–¥–∏–Ω–æ–∫ ‚Ññ2 –°–µ–∫—Ü—ñ—è ‚Ññ2",
        "6": "–ë—É–¥–∏–Ω–æ–∫ ‚Ññ2 –°–µ–∫—Ü—ñ—è ‚Ññ3",
        "7": "–ë—É–¥–∏–Ω–æ–∫ ‚Ññ2 –°–µ–∫—Ü—ñ—è ‚Ññ4",
    }

    PREFIX = "–ô–¥–µ –µ—Ç–∞–ø –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞: "

    STATUS_MAP = {
        "1": "‚úÖ–ë—É–¥—É–≤–∞—Ç–∏—Å—è –∑–∞ –ø–ª–∞–Ω–æ–º",
        "2": "‚ùå–ë—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ –∑—É–ø–∏–Ω–µ–Ω–æ",
    }

    STATUS_MAP_SMALL = {
        "1": "‚úÖ",
        "2": "‚ùå",
    }

    def __init__(self, bot, dao):
        self.bot = bot
        self.dao = dao
        self.sections = self._build_sections()

    def _build_sections(self):
        return [types.KeyboardButton(i) for i in self.SECTIONS]

    def generate_states(self, states_list_ids):
        return "\n".join([f'- {self.STATUS_MAP_SMALL.get("2")} {self.BUILDING_STATUS_MAP.get(i)}' for i in states_list_ids])

    def screen(self, message):
        plans = self.dao.building_plan.get()
        for i in plans.values():
            text_states = self.generate_states(i.get_expected_state())
            text_body = (
                f'<strong>üèó{self.BUILDING_NUMBERS.get(i.title, "").upper()}</strong>\n\n'
                f'<strong>–ü–ª–∞–Ω –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞ –Ω–∞ {i.get_date()}:</strong>\n'
                f"{text_states}\n\n"
                f'<strong>–°—Ç–∞—Ç—É—Å –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞: {self.STATUS_MAP["2"]}</strong>'
            )
            self.bot.send_message(message.chat.id, text_body, parse_mode='HTML')
        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=1)
        keyboard.add(types.KeyboardButton(text="üö™–í–∏—Ö—ñ–¥"))
        self.bot.send_message(message.chat.id, "–î–æ–ø–æ–º–∞–≥–∞–π —Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏", reply_markup=keyboard)

    @staticmethod
    def match(message):
        return message.text.startswith("üóì–ë—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ") or False
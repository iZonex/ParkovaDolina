import asyncio
import time
from parkovadolina.utils.weather import get_weather_info
from parkovadolina.utils.rad import get_rad_sensor_info
from parkovadolina.utils.sensors import get_air_sensor_info
from parkovadolina.core.screen import Screen
from aiogram.types.message import ParseMode

def format_wind_direction(wind_data):
    COMPASS_TRANSLATION_MAP = { 
        "N": "–ü—ñ–≤–Ω—ñ—á–∏",
        "NNE": "–ü—ñ–≤–Ω—ñ—á–Ω–æ–≥–æ —Å—Ö—ñ–¥—É",
        "NE": "–ü—ñ–≤–Ω—ñ—á–Ω–æ–≥–æ —Å—Ö—ñ–¥—É",
        "ENE": "–°—Ö—ñ–¥—É",
        "E": "–°—Ö—ñ–¥—É",
        "ESE": "–°—Ö—ñ–¥—É",
        "SE": "–ü—ñ–≤–¥–µ–Ω–Ω–æ–≥–æ —Å—Ö—ñ–¥—É",
        "SSE": "–ü—ñ–≤–¥–µ–Ω–Ω–æ–≥–æ —Å—Ö—ñ–¥—É",
        "S": "–ü—ñ–≤–¥–µ–Ω—å—è",
        "SSW": "–ü—ñ–≤–¥–µ–Ω—å—è",
        "SW": "–ü—ñ–≤–¥–µ–Ω–Ω–æ–≥–æ –∑–∞—Ö—ñ–¥—É",
        "WSW": "–ó–∞—Ö—ñ–¥—É",
        "W": "–ó–∞—Ö—ñ–¥—É",
        "WNW": "–ó–∞—Ö—ñ–¥—É",
        "NW": "–ü—ñ–≤–Ω—ñ—á–Ω–æ–≥–æ –∑–∞—Ö—ñ–¥—É",
        "NNW": "–ü—ñ–≤–Ω—ñ—á–Ω–æ–≥–æ –∑–∞—Ö—ñ–¥—É"
    }

    wind_from = wind_data.get("from")
    if wind_from:
        wind_speed = wind_data["speed"]
        return f"–ó {COMPASS_TRANSLATION_MAP[wind_from]} —ñ–∑ —à–≤–∏–¥–∫—ñ—Å—Ç—é {wind_speed:.0f} –º/—Å"
    return "–Ω–µ–º–∞—î"

class AirCleanScreen(Screen):

    SENSOR_ID = "48"
    AIR_PORT = "UKKK"
    CACHE_TTL_LAG = 600

    def __init__(self, bot, dao):
        self.bot = bot
        self.dao = dao
        self.cache_ttl = self.CACHE_TTL_LAG
        self.last_cache = time.time()
        self.cached_data = []

    async def gether_data(self):
        tasks = [get_air_sensor_info(self.SENSOR_ID), get_rad_sensor_info(), get_weather_info(self.AIR_PORT)]
        return await asyncio.gather(*tasks)

    async def screen(self, message):
        if self.last_cache <= time.time():
            self.cached_data = await self.gether_data()
            self.last_cache = time.time() + self.CACHE_TTL_LAG
        if all(self.cached_data):
            sensor_data, rad_sensor_data, weather_data = self.cached_data
            text_body = (
                f'<b>–ó–∞ –∞–¥—Ä–µ—Å–æ—é –ö–∞–π—Å–∞—Ä–æ–≤–∞ 7/9</b>\n'
                f'–Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –¥–∞—Ç—á–∏–∫—ñ–≤\n\n'
                f"üå§PM2.5: {sensor_data['particles']['pm1']:.2f} –º–∫–≥/–º3\n"
                f"üå§PM10: {sensor_data['particles']['pm10']:.2f} –º–∫–≥/–º3\n"
                f"üå§PM1: {sensor_data['particles']['pm25']:.2f} –º–∫–≥/–º3\n"
                f"üí¶–í–æ–ª–æ–≥—ñ—Å—Ç—å: {sensor_data['weather']['humidity']:.0f} %\n"
                f"üå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temp']:.0f} ¬∞C\n"
                f"üíß–¢–æ—á–∫–∞ —Ä–æ—Å–∏: {weather_data['dewpt']:.0f} ¬∞C\n"
                f"üí®–í—ñ—Ç–µ—Ä: {format_wind_direction(weather_data['wind'])}\n"
                f"ü©∫–¢–∏—Å–∫: {weather_data['press']:.0f} –º–±–∞—Ä\n"
                f"‚ò¢–†–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –§–æ–Ω: {rad_sensor_data} –º–∫–ó–≤/—á\n"
            )
        else:
            text_body = (
                f'<b>–ó–∞ –∞–¥—Ä–µ—Å–æ—é –ö–∞–π—Å–∞—Ä–æ–≤–∞ 7/9</b>\n'
                f'–î–∞—Ç—á–∏–∫–∏ —è–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ—Ç—Ä—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ\n\n'
            )
        await self.bot.send_message(message.chat.id, text_body, parse_mode=ParseMode.HTML)

    @staticmethod
    def match(message):
        return message.text.startswith("üå§–ö–ª—ñ–º–∞—Ç") or False